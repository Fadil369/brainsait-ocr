[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "brainsait-ocr"
description = "BrainSAIT OCR - Advanced Multilingual Document Reader"
authors = [
    {name = "Dr. Fadil", email = "dev@brainsait.com"},
]
license = {text = "MIT"}
readme = "brainsait_ocr_setup.md"
keywords = ["ocr", "ai", "arabic", "multilingual", "document", "processing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Multimedia :: Graphics :: Capture :: Scanners",
]
requires-python = ">=3.8"
dependencies = [
    "mistralai>=1.0.0",
    "aiohttp>=3.9.0",
    "aiofiles>=23.2.0",
    "httpx>=0.25.0",
    "Pillow>=10.0.0",
    "PyMuPDF>=1.23.0",
    "pytesseract>=0.3.10",
    "opencv-python>=4.8.0",
    "langdetect>=1.0.9",
    "markdown>=3.5.0",
    "python-docx>=0.8.11",
    "python-pptx>=0.6.21",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "jinja2>=3.1.2",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "click>=8.1.7",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "colorama>=0.4.6",
    "structlog>=23.2.0",
    "rich>=13.0.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.6.0",
    "isort>=5.12.0",
    "bandit>=1.7.5",
    "pre-commit>=3.5.0",
    "jupyter>=1.0.0",
    "ipython>=8.0.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
profiling = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.14",
]
database = [
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/Fadil369/brainsait-ocr"
Documentation = "https://github.com/Fadil369/brainsait-ocr/blob/main/brainsait_ocr_setup.md"
Repository = "https://github.com/Fadil369/brainsait-ocr"
"Bug Tracker" = "https://github.com/Fadil369/brainsait-ocr/issues"
Changelog = "https://github.com/Fadil369/brainsait-ocr/releases"

[project.scripts]
brainsait-ocr = "brainsait_ocr_backend:main"

[tool.setuptools_scm]
write_to = "brainsait_ocr/_version.py"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["brainsait_ocr"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D",
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".tox",
    "node_modules",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "mistralai.*",
    "fitz.*",
    "pytesseract.*",
    "langdetect.*",
    "cv2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "arabic: marks tests specific to Arabic language processing",
    "performance: marks tests that measure performance",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["brainsait_ocr"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "node_modules"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]