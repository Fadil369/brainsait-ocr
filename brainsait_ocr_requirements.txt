# requirements.txt - BrainSAIT OCR Dependencies

# Core OCR and AI
mistralai>=1.0.0
openai>=1.0.0  # Fallback compatibility

# Async HTTP and File Operations
aiohttp>=3.9.0
aiofiles>=23.2.0
httpx>=0.25.0

# Image and PDF Processing
Pillow>=10.0.0
PyMuPDF>=1.23.0
pytesseract>=0.3.10
opencv-python>=4.8.0

# Text Processing and Language Detection
langdetect>=1.0.9
markdown>=3.5.0
python-docx>=0.8.11
python-pptx>=0.6.21

# Web Framework and Server
fastapi>=0.104.0
uvicorn[standard]>=0.24.0
jinja2>=3.1.2

# Data Processing
pandas>=2.0.0
numpy>=1.24.0
pydantic>=2.0.0

# CLI and Configuration
click>=8.1.7
python-dotenv>=1.0.0
pyyaml>=6.0.1
colorama>=0.4.6

# Logging and Monitoring
structlog>=23.2.0
rich>=13.0.0

# Development Dependencies
pytest>=7.4.0
pytest-asyncio>=0.21.0
pytest-cov>=4.1.0
black>=23.0.0
flake8>=6.0.0
mypy>=1.6.0
pre-commit>=3.5.0

---

# .env.example - Environment Configuration Template

# Mistral AI Configuration
MISTRAL_API_KEY=your_mistral_api_key_here

# Processing Configuration
MAX_FILE_SIZE=52428800  # 50MB
MAX_CONCURRENT_REQUESTS=5
CACHE_EXPIRY_DAYS=30
DEFAULT_LANGUAGE=ar

# Server Configuration
SERVER_HOST=0.0.0.0
SERVER_PORT=8000
LOG_LEVEL=INFO
ENABLE_CORS=true

# Storage Configuration
CACHE_DIRECTORY=./ocr_cache
OUTPUT_DIRECTORY=./output
LOG_DIRECTORY=./logs

# BrainSAIT Integration
BRAINSAIT_API_ENDPOINT=https://api.brainsait.com
BRAINSAIT_WEBHOOK_URL=https://webhook.brainsait.com/ocr

---

# Dockerfile - Production Container

FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-ara \
    tesseract-ocr-eng \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p ocr_cache output logs

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD python -c "import requests; requests.get('http://localhost:8000/api/health')"

# Run the application
CMD ["python", "brainsait_ocr.py", "server", "--host", "0.0.0.0", "--port", "8000"]

---

# docker-compose.yml - Complete BrainSAIT OCR Stack

version: '3.8'

services:
  brainsait-ocr:
    build: .
    container_name: brainsait-ocr
    ports:
      - "8000:8000"
    environment:
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - LOG_LEVEL=INFO
      - MAX_CONCURRENT_REQUESTS=5
    volumes:
      - ./ocr_cache:/app/ocr_cache
      - ./output:/app/output
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - brainsait-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: brainsait-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - brainsait-ocr
    restart: unless-stopped
    networks:
      - brainsait-network

  redis:
    image: redis:7-alpine
    container_name: brainsait-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - brainsait-network

volumes:
  redis_data:

networks:
  brainsait-network:
    driver: bridge

---

# nginx.conf - Nginx Configuration

events {
    worker_connections 1024;
}

http {
    upstream brainsait_ocr {
        server brainsait-ocr:8000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=ocr_limit:10m rate=10r/m;
    
    # File upload limits
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # API routes with rate limiting
        location /api/ {
            limit_req zone=ocr_limit burst=5 nodelay;
            proxy_pass http://brainsait_ocr;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings for long OCR operations
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # Static files
        location / {
            proxy_pass http://brainsait_ocr;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            access_log off;
            proxy_pass http://brainsait_ocr/api/health;
        }
    }
}

---

# config.yaml - Application Configuration

# BrainSAIT OCR Configuration
app:
  name: "BrainSAIT OCR"
  version: "1.0.0"
  description: "Advanced Multilingual Document Reader"
  author: "Dr. Fadil - BrainSAIT"

api:
  provider: "mistral"
  base_url: "https://api.mistral.ai/v1"
  model: "mistral-ocr-latest"
  retry_attempts: 3
  retry_delay: 2
  timeout: 300

processing:
  default_options:
    extract_images: true
    preserve_formatting: true
    auto_translate: false
    extract_tables: true
  
  limits:
    max_file_size: 52428800  # 50MB
    max_files_per_batch: 10
    max_concurrent: 5
    
  supported_formats:
    - "pdf"
    - "png" 
    - "jpg"
    - "jpeg"
    - "webp"
    - "bmp"
    - "tiff"

caching:
  enabled: true
  directory: "./ocr_cache"
  expiry_days: 30
  max_cache_size: 1073741824  # 1GB

storage:
  cache_directory: "./ocr_cache"
  output_directory: "./output" 
  log_directory: "./logs"
  temp_directory: "/tmp"

server:
  host: "0.0.0.0"
  port: 8000
  workers: 1
  cors_enabled: true
  max_upload_size: 52428800
  allowed_origins:
    - "http://localhost:3000"
    - "https://brainsait.com"
    - "https://*.brainsait.com"

logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file_rotation: "1 week"
  max_files: 4

languages:
  primary: "ar"
  supported:
    - "ar"  # Arabic
    - "en"  # English
    - "fr"  # French
    - "es"  # Spanish
    - "de"  # German
    - "it"  # Italian
    - "ru"  # Russian
    - "zh"  # Chinese
    - "ja"  # Japanese
    - "ko"  # Korean

brainsait_integration:
  api_endpoint: "https://api.brainsait.com"
  webhook_url: "https://webhook.brainsait.com/ocr"
  agent_types:
    - "healthcare"
    - "education" 
    - "business"
    - "research"

---

# .gitignore - Git Ignore Rules

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Environment
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Application specific
ocr_cache/
output/
logs/
*.log
temp/
uploads/
processed/

# Docker
.dockerignore
docker-compose.override.yml

# Testing
.pytest_cache/
.coverage
htmlcov/
.tox/

# Documentation
docs/_build/

---

# Makefile - Development and Deployment Commands

.PHONY: install dev test lint format clean docker-build docker-run deploy

# Variables
PYTHON := python3
PIP := pip3
DOCKER_TAG := brainsait-ocr:latest

# Installation
install:
	$(PIP) install -r requirements.txt

dev:
	$(PIP) install -r requirements-dev.txt
	pre-commit install

# Testing
test:
	pytest tests/ -v --cov=brainsait_ocr

test-integration:
	pytest tests/integration/ -v

benchmark:
	$(PYTHON) tests/benchmark_processing.py

# Code quality
lint:
	flake8 brainsait_ocr/
	mypy brainsait_ocr/

format:
	black brainsait_ocr/
	black tests/

# Docker operations
docker-build:
	docker build -t $(DOCKER_TAG) .

docker-run:
	docker-compose up -d

docker-stop:
	docker-compose down

docker-logs:
	docker-compose logs -f brainsait-ocr

# Deployment
deploy-staging:
	docker-compose -f docker-compose.staging.yml up -d

deploy-production:
	docker-compose -f docker-compose.prod.yml up -d

# Maintenance
clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -rf build/ dist/ *.egg-info/
	rm -rf .pytest_cache/ .coverage htmlcov/

clean-cache:
	$(PYTHON) brainsait_ocr.py clear-cache --days 7

backup:
	tar -czf backup-$(shell date +%Y%m%d).tar.gz ocr_cache/ output/ logs/

# Development server
serve:
	$(PYTHON) brainsait_ocr.py server --reload --port 8000

# Documentation
docs:
	sphinx-build -b html docs/ docs/_build/

---

# requirements-dev.txt - Development Dependencies

# Testing
pytest>=7.4.0
pytest-asyncio>=0.21.0
pytest-cov>=4.1.0
pytest-mock>=3.11.0
pytest-xdist>=3.3.0

# Code Quality
black>=23.0.0
flake8>=6.0.0
mypy>=1.6.0
isort>=5.12.0
bandit>=1.7.5

# Development Tools
pre-commit>=3.5.0
jupyter>=1.0.0
ipython>=8.0.0

# Documentation
sphinx>=7.1.0
sphinx-rtd-theme>=1.3.0
myst-parser>=2.0.0

# Profiling
memory-profiler>=0.61.0
line-profiler>=4.1.0
py-spy>=0.3.14

# Database (for advanced caching)
redis>=5.0.0
sqlalchemy>=2.0.0

---

# .pre-commit-config.yaml - Pre-commit Hooks

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict

  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black

  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.6.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]